CMAKE_MINIMUM_REQUIRED(VERSION 3.18)

PROJECT(Jungfraujoch VERSION 1.0 LANGUAGES C CXX)

INCLUDE(CheckLanguage)
CHECK_LANGUAGE(CUDA)

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED True)

SET(CMAKE_CUDA_ARCHITECTURES 70 75 80 86) # V100, T4, A100, RTX A4000
SET(CMAKE_CUDA_STANDARD 17)

IF (${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "ppc64le")
    SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -mcpu=power9 -mtune=power9")
    SET(CMAKE_C_FLAGS_RELEASE "-O3 -mcpu=power9 -mtune=power9")
    SET(CMAKE_CUDA_FLAGS_RELEASE "-O3 -mcpu=power9 -mtune=power9")
ELSE()
    SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -march=native -mtune=native")
    SET(CMAKE_C_FLAGS_RELEASE "-O3 -march=native -mtune=native")
    SET(CMAKE_CUDA_FLAGS_RELEASE "-O3")
ENDIF()

SET(JFJOCH_COMPILE_WRITER    ON CACHE BOOL "Compile HDF5 writer")
SET(JFJOCH_COMPILE_FPGA      ON CACHE BOOL "Compile FPGA part")
SET(JFJOCH_COMPILE_DETECTOR  ON CACHE BOOL "Compile detector control")
SET(JFJOCH_COMPILE_INDEXER   ON CACHE BOOL "Compile indexer")
SET(JFJOCH_COMPILE_TESTS     OFF CACHE BOOL "Compile tests")

INCLUDE_DIRECTORIES(include)
INCLUDE(CheckIncludeFile)

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
FIND_PACKAGE(ZeroMQ 4 REQUIRED)

IF (CMAKE_CUDA_COMPILER)
    ENABLE_LANGUAGE(CUDA)
    MESSAGE(STATUS "CUDA VERSION: ${CMAKE_CUDA_COMPILER_VERSION}")
ELSE()
    MESSAGE(STATUS "CUDA not found")
ENDIF()

ADD_SUBDIRECTORY(frame_serialize)
ADD_SUBDIRECTORY(grpc)
ADD_SUBDIRECTORY(compression)
ADD_SUBDIRECTORY(common)
ADD_SUBDIRECTORY(broker)
ADD_SUBDIRECTORY(etc)
ADD_SUBDIRECTORY(tools)

SET(jfjoch_executables jfjoch_broker)

IF (JFJOCH_COMPILE_TESTS OR JFJOCH_COMPILE_FPGA)
    ADD_SUBDIRECTORY(fpga)
    LIST(APPEND jfjoch_executables jfjoch_receiver)
ENDIF()

IF (JFJOCH_COMPILE_DETECTOR)
    ADD_SUBDIRECTORY(detector_control)
    LIST(APPEND jfjoch_executables jfjoch_detector)
ENDIF()

IF (JFJOCH_COMPILE_TESTS OR JFJOCH_COMPILE_WRITER)
    ADD_SUBDIRECTORY(writer)
    LIST(APPEND jfjoch_executables jfjoch_writer jfjoch_writer_test)
ENDIF()

IF (JFJOCH_COMPILE_TESTS OR JFJOCH_COMPILE_INDEXER)
    ADD_SUBDIRECTORY(indexing)
    LIST(APPEND jfjoch_executables jfjoch_xgandalf)
ENDIF()

IF (JFJOCH_COMPILE_TESTS)
    ADD_SUBDIRECTORY(tests)
    LIST(APPEND jfjoch_executables CatchTest DataAnalysisPerfTest CompressionBenchmark HDF5DatasetWriteTest)
ENDIF()

ADD_CUSTOM_COMMAND(OUTPUT frontend_ui/build/index.html
        COMMAND npm run build
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/frontend_ui
        DEPENDS jfjoch-grpc-js)
ADD_CUSTOM_TARGET(frontend DEPENDS frontend_ui/build/index.html)

ADD_CUSTOM_TARGET(jfjoch DEPENDS ${jfjoch_executables})

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  SET(CMAKE_INSTALL_PREFIX /opt/jfjoch CACHE PATH "Default directory" FORCE)
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

